cmake_minimum_required(VERSION 3.10)
project("libsoup")

find_package(PythonInterp 2.7.0 REQUIRED)
if (PYTHON_VERSION_MAJOR GREATER 2)
    message(FATAL_ERROR "Python 2 is required, but Python ${PYTHON_VERSION_MAJOR} was found.")
endif ()

# Append the given dependencies to the source file
macro(ADD_SOURCE_DEPENDENCIES _source _deps)
    set(_tmp)
    get_source_file_property(_tmp ${_source} OBJECT_DEPENDS)
    if (NOT _tmp)
        set(_tmp "")
    endif ()

    foreach (f ${_deps})
        list(APPEND _tmp "${f}")
    endforeach ()

    set_source_files_properties(${_source} PROPERTIES OBJECT_DEPENDS "${_tmp}")
    unset(_tmp)
endmacro()

### glib-mkenums
find_file (MKENUMS glib-mkenums ${CURRENT_PACKAGES_DIR}/${PORT}/tools/glib)
if (MKENUMS MATCHES MKENUMS-NOTFOUND)
    message(FATAL_ERROR "Unable to find glib-mkenums")
endif ()
message (STATUS "Found glib-mkenums: ${MKENUMS}")

macro(MAKE_ENUMS _enum_header_output _enum_source_output _source_headers _header_fhead _source_fhead)
    string (REPLACE ";" " " _source_headers "${_source_headers}")
    add_custom_command(
        OUTPUT ${_enum_header_output}
        DEPENDS ${_source_headers}
        COMMAND perl ${MKENUMS}
        --fhead "/* Generated by glib-mkenums. Do not edit */\\n\\n#pragma once\\n\\n"
        --fhead ${_header_fhead}
        --fhead "#include <glib-object.h>\\n\\nG_BEGIN_DECLS\\n"
        --fhead "#ifndef GLIB_MKENUMS_EXTERN\\n#define GLIB_MKENUMS_EXTERN\\n#endif\\n"
        --vhead "GLIB_MKENUMS_EXTERN GType @enum_name@_get_type (void) G_GNUC_CONST;\\n#define @ENUMPREFIX@_TYPE_@ENUMSHORT@ (@enum_name@_get_type ())\\n"
        --ftail "G_END_DECLS"
        ${_source_headers} > ${_enum_header_output}
        VERBATIM)
    set_source_files_properties(${_enum_header_output} PROPERTIES GENERATED TRUE)

    get_filename_component(_enum_header_output_filename ${_enum_header_output} NAME)
    foreach(include_file ${_source_headers})
        set (include_statements "${include_statements}#include \"{$include_file}\"\n")
    endforeach()
    add_custom_command(
        OUTPUT ${_enum_source_output}
        DEPENDS ${_source_headers}
        COMMAND perl ${MKENUMS}
        --fhead "/* Generated by glib-mkenums. Do not edit */\\n\\n#ifdef HAVE_CONFIG_H\\n#include <config.h>\\n#endif\\n\\n#include \"${_enum_header_output_filename}\"\\n\\n"
        --fhead ${_source_fhead}
        --fhead ${include_statements}
        --vhead "GType\\n@enum_name@_get_type (void)\\n{\\n  static volatile gsize g_define_type_id__volatile = 0;\\n\\n  if (g_once_init_enter (&g_define_type_id__volatile))\\n    {\\n      static const G@Type@Value values[] = {\\n"
        --vprod "        { @VALUENAME@, \\"@VALUENAME@\\", \\"@valuenick@\\" },\\n"
        --vtail "        { 0, NULL, NULL }\\n      };\\n      GType g_define_type_id =\\n        g_@type@_register_static (g_intern_static_string (\\"@EnumName@\\"), values);\\n      g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);\\n    }\\n\\n  return g_define_type_id__volatile;\\n}\\n"
        ${_source_headers} > ${_enum_source_output}
        VERBATIM)
    set_source_files_properties(${_enum_source_output} PROPERTIES GENERATED TRUE)
endmacro()

add_subdirectory("libsoup")
